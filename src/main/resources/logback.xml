<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="false">
<!--    <property name="LOG_HOME" value="F:\data\logs\redis\demo"/>-->
<!--    <property name="appName" value="main"></property>-->

    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志输出格式：
        %d表示日期时间，
        %thread表示线程名，
        %-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
        %msg：日志消息，
        %n是换行符-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!--<appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash; 指定日志文件的名称 &ndash;&gt;
        <file>${LOG_HOME}/info.log</file>
        &lt;!&ndash;
   当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
    TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
    &ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;
        滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
        %i：当文件大小超过maxFileSize时，按照i进行文件滚动
        &ndash;&gt;
            <fileNamePattern>${LOG_HOME}/info-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            &lt;!&ndash;
        可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
        且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
        那些为了归档而创建的目录也会被删除。
        &ndash;&gt;
            <MaxHistory>365</MaxHistory>
&lt;!&ndash;        当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy&ndash;&gt;
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        &lt;!&ndash; 日志输出格式： &ndash;&gt;
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoding>UTF-8</encoding>
        <file>${LOG_HOME}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>logs/error.%d{yyyy-MM-dd}.log</FileNamePattern>
        </rollingPolicy>
        <layout>
            <pattern>[%date{yyyy-MM-dd HH:mm:ss}] [%-5level] [%logger:%line] &#45;&#45;%mdc{client} %msg%n</pattern>
        </layout>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>-->

    <root level="info">
        <appender-ref ref="stdout" />
<!--        <appender-ref ref="appLogAppender" />-->
<!--        <appender-ref ref="ERROR_FILE" />-->
    </root>
</configuration>